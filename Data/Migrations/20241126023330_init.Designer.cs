// <auto-generated />
using System;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parky_backend.Data;

#nullable disable

namespace Parky_backend.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241126023330_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 31);

            modelBuilder.Entity("Parky_backend.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("CNPJ")
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("CPF")
                        .HasColumnType("VARCHAR(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Parky_backend.Models.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("Parky_backend.Models.ParkingRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<DateTime>("EntryDateTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("ExitDateTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<Guid>("ParkingSpaceId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FeeId");

                    b.HasIndex("ParkingSpaceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ParkingRegistry");
                });

            modelBuilder.Entity("Parky_backend.Models.ParkingSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Available")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("ParkingSpace");
                });

            modelBuilder.Entity("Parky_backend.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Color")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Parky_backend.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(16) CHARACTER SET OCTETS");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.HasKey("Id");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("Parky_backend.Models.Fee", b =>
                {
                    b.HasOne("Parky_backend.Models.VehicleType", "VehicleType")
                        .WithMany("Fee")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Parky_backend.Models.ParkingRegistry", b =>
                {
                    b.HasOne("Parky_backend.Models.Client", "Client")
                        .WithMany("ParkingRegistry")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Parky_backend.Models.Fee", "Fee")
                        .WithMany("ParkingRegistry")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Parky_backend.Models.ParkingSpace", "ParkingSpace")
                        .WithMany("ParkingRegistry")
                        .HasForeignKey("ParkingSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Parky_backend.Models.Vehicle", "Vehicle")
                        .WithMany("ParkingRegistry")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Fee");

                    b.Navigation("ParkingSpace");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Parky_backend.Models.ParkingSpace", b =>
                {
                    b.HasOne("Parky_backend.Models.VehicleType", "VehicleType")
                        .WithMany("ParkingSpace")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Parky_backend.Models.Vehicle", b =>
                {
                    b.HasOne("Parky_backend.Models.Client", "Client")
                        .WithMany("Vehicle")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Parky_backend.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Parky_backend.Models.Client", b =>
                {
                    b.Navigation("ParkingRegistry");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Parky_backend.Models.Fee", b =>
                {
                    b.Navigation("ParkingRegistry");
                });

            modelBuilder.Entity("Parky_backend.Models.ParkingSpace", b =>
                {
                    b.Navigation("ParkingRegistry");
                });

            modelBuilder.Entity("Parky_backend.Models.Vehicle", b =>
                {
                    b.Navigation("ParkingRegistry");
                });

            modelBuilder.Entity("Parky_backend.Models.VehicleType", b =>
                {
                    b.Navigation("Fee");

                    b.Navigation("ParkingSpace");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
